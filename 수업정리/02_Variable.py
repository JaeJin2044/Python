#day_02


print(1,2,3) #sep=' ' 이 기본으로 적용 아무것도 안적었지만 한칸씩 띄어짐
print(1,2,3, sep=' ') #가장 마지막에 sep=' '를 표시
print(1,2,3, sep='') #빈문자열을 넣었으니 붙어서 나옴 ..123이 아니라 각각의 숫자임
print(1,2,3, sep="재진")  #이런식으로 응용 가능 ...
print(1,2,3, sep= "5")
#얼마든지 원하는 값을 구분기호로 지정 가능 ...

print("안녕") #이렇게 적으면  end="\n"이 기본으로 적용 된것임...
print("하세요", end="\n")   #이거 두개 전부 다같다 ... 생략 된것이기 때문..
print("반갑습니다." , end="하하") #end 는 출력하는거임 ...
print("잘가요~~")
print("dsafsdfsadf" ,end= "밑에 문장 연결된다.")
print("이것도 아마 붙을듯")
print("이건 따로 나온다.", end= "이건 역슬러쉬 넣어서 다음꺼 나옴. \n")
print("이건 독립적으로 나온다.")


print("제 이름은 홍길동입니다. \n제 나이는 \n20 살입니다. " ,end="잘부탁드립니다.\n")
#end 는 마지막에 출력해주는 기능이지... end안에 \n이 있다면 개행을 해준다.
#그냥 마지막에 말 붙여 주는거라 생각 그리고 출력후 \n써서 개행 해주자 !!! 보기 깔끔

print(1,2,3, sep="과 ",end="입니다\n")
print(1,"과 ",2,"와 ",3,"입니다" , sep="")

print(200,"원 입니다." ,sep="")
print(200,"원",sep="", end=" 입니다.\n")  #개행문자는 항상 문자이기 때문에 따옴표로 묶어준다.
print()  #이렇게 사용하면 end="\n" 만 적용되어 1줄 개행만 한다.
print(end="\n")

# print()함수에서 +(덧셈) 용도
# +같은 기호를 "연산자"라고 부른다.
# 연산을 수행한다 = 하나의 값을 만든다.

print("1 + 2 =",1+2) #숫자+숫자 = 덧셈 연산
print("1과" + "2") #문자열+문자열 = 문자 연결(붙여준다)
print("1""2") #기호없이  연결 가능(문자열일 때 만 가능)-되도록 +기호 붙이자...

#print(1+"2")  #숫자+문자열 (오류남)

#이런오류를 '논리 오류'라 칭한다 ..   문법적인 문제는 없지만 잘못되었다 ..
#실행은 되지만 오류 발생---> 논리 오류

#print(1"2")
#이런식으로 존재하지 않는 이런 문법문제가 발생하면 '오류메세지'가 띄어 지면서 실행X

# +기호는 '연산' --> 하나의 값을 만든다
# ,기호는 '나열  --> 여러값을 나열하여 출력한다 ..

print(2020,"년도 입니다." , sep="")
print(2020 +1 ,"년도 입니다."+"새해 복 많이 받으세요", sep="")
#숫자는 숫자 끼리 연산하고 , 문자는 문자끼리 연산한다.

print("=======================================================")

'''
#변수 (Variable)
    -값을 저장 하는 공간
    -파이썬에서 사용하는 변수는 값을 '저장'하는 개념이 아니라 "값을 가리킨다".
    -번지 수를 들고 있다고 생각 해야한다 .. 변수에 그 값을 끄집어 낸다 라고 생각 ..
    - C나 JAVA에서는 저장한다 .. 파이썬에서는 가리킨다 .. 어려우면 그냥 저장이라 생각
'''

#프로그래밍 언어에서 =(equal)기호는 "같다"가 아니라 "대입" 이다 ..
#우측에 있는 값을 좌측에 대입한다고 생각 해라 !!!!

#변수에 값 대입 하는 방법(1)
    #하나씩 대입
a = 1 #a라는 변수에 1을 '대입'

#Python 에서는 값의 형태를 명시하지 않고 사용 가능 하다 ..
# 예를 들어  C같은 경우에는 형태를 알려 줘야함 . ..정수면 int a = 3 이런식으로 !!!
#그러나 python에서는 알아서 해줌 .. 간단,편안 ... good

b = "2"
c = 3 
print(a,b,c) #각 변수가 가리키고 있는 값을 사용 a = 1, b = "2" , c = 3

print("=======================================================")

#변수의 값 대입 (2)
    #한번에 여러 가지 값 대입 가능 하다 ..
a,b,c = 4, 5, 6  #순서대로 대입한다 , 그리고 짝이 맞아야 함 

print(a,b,c)
print("=======================================================")

#변수의 값 대입 (3)
    #모두 같은 값
a=b=c=7   #a,b,c 전부다 7이라는 값을 가지고 있다. 7이c에대입 c가b에 대입 b가a에 대입이라는 뜻

print(a,b,c)

#웬만하면 한개에서 하나 하나 씩 대입하는게 알아 보기 좋고 좋음 !!!!
#가능하다는 것 정도만 알아두고 하나씩 하자 ...

print("=======================================================")

# 변수끼리 값을 교체 가능
a = 10
b = 20

a , b = b, a  #변수끼리 값이 교체 a는 20 이 되고 , b는 10이 된다 ..
              #"우측에 있는 값을 좌측에 대입한다" 이 개념을 정확하게 인지 하자 ...!!!!!
print(b)
print(a)

print("=======================================================")

'''
    변수명 규칙
        1. 한글 사용 가능 --> 영어로 사용한다.
        2. 특수문자(기호)는 _만 사용
        3. 숫자 사용 가능 , 단 첫글자로는 안된다 ..
        4. 대소문자 구분 확실
            >>> 변수명 뿐만 아니라 모든 코드가 구분
            >>> 프로그래밍 언어 공통
        5. 예악어 사용 불가
            >>>이미 시스템에서 사용하고 있는 단어
            >>>색상이 들어간 단어 사용하지 말기

        *중요*
            >변수명 지을 때 의미를 부여한다.
            >변수명만 봐도 어떤 값을 사용하는지 알 수 있도록 하기 .
                ex) a, b, c, d, e, f 이런식으로 사용 하지 않는다 .
                ex) 숫자열--> num1, num2, ....
                ex) 문자열--> str1, str2, ....
                ex) 사과의 개수 ---> AppleCount
                
'''


# 1. 한글 사용 가능 -->  영어로 한다 .(이거 쳐다도 보지말고 그냥 영어로 써라 된다는것만 알기!)

이재진= 1349834598
print(이재진)
print("=======================================================")
# 2. 특수문자는 _만 (단어랑 단어사이 구분을 용이하게 해주기 위해서 사용하는거다..)

my_num = 10

print(my_num)

print("=======================================================")

#3.숫자 사용이 가능 하다 , 첫글자로는 x

num1 = 1
num2 = 2
#1num = 20    <---- 이렇게 사용 안됨
print(num1,num2)

print("=======================================================")

#4.대 소문자 구분확실하게 하자

num = 1
Num = 2
NUM = 3
nUM = 4
#전부 다 다른단어임 ...
print(num, Num, NUM)

print("=======================================================")


#5. 예약어 사용 불가
#예약어 목록 확인
import keyword  #keyword라는 소스파일을 사용하겠다 ..라는 뜻임

print(keyword.kwlist)
print("=======================================================")
#정말 정말 굳이 사용 하겠다면 ...True -같은거 true 이런식으로 대문자를 소문자로 바꾸든가 ..
#아니면 뒤에 숫자를 True1 숫자를 붙이든가 하면 쓸 수는 있지만 하지말자 ...

print = "출력!"    #변수로는 만들수 있지만 ... 출력기능을 잃어 버리기때문에 이렇게 사용 X
#print("출력ㅁㄴㅇㄻㄴㅇㄹ")

del(print)       #<<--- 변수를 제거 했다.. 그래서 print함수의 기능을 다시 부활 시킴

print("출력!!")

































































